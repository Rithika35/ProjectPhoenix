#include <SD.h>
#include <Wire.h>
#include "SparkFunMPL3115A2.h"
//Create an instance of the object
MPL3115A2 myPressure;
File myFile;
int ledPin = 13;  // LED is attached to digital pin 13
const int led_pin = PB5;
volatile uint32_t count = 0;
unsigned long time;
float SuperSonicMin = 0.0; // time it takes to reach supersonic speed
float SuperSonicSec = 5.0; 
void setup() {
  // put your setup code here, to run once:
  Wire.begin();        // Join i2c bus
  myPressure.begin(); // Get sensor online
  Serial.begin(115200);
  Serial.println("");
  Serial.println("Timer:");
  myPressure.setModeAltimeter(); // Measure altitude above sea level in meters
  myPressure.setModeBarometer(); // Measure pressure in Pascals from 20 to 110 kPa
  myPressure.setOversampleRate(128); // Set Oversample to the recommended 128
  myPressure.enableEventFlags(); // Enable all three pressure and temp event flags 

}
void loop() {
  // put your main code here, to run repeatedly:
  time = millis();
  float SuperSonicCount = (SuperSonicSec/60.0 +SuperSonicMin)*60000.0;
  int MilliSec = time % 10;
  int HundrethSec = (time/10) % 10;
  int TenthSec = (time/100) % 10;
  int OneSec = (time/ 1000) % 10;
  int TenSec = (time/ 10000)%6;
  Serial.print("T+");Serial.print(time/60000);Serial.print(":");Serial.print(TenSec);Serial.print(OneSec);Serial.print(":");Serial.print(TenthSec);Serial.print(HundrethSec);Serial.print(MilliSec);
  //Serial.print(time);    
   if(time > SuperSonicCount ){
    PORTB ^= (1 << led_pin);
    pinMode(ledPin, OUTPUT);
  }
  //float altitude = myPressure.readAltitude();
 // Serial.print(" Altitude(m):");
  //Serial.print(altitude, 2);
  float altitude = myPressure.readAltitudeFt()-82905;
  Serial.print(" Altitude(ft):");
  Serial.print(altitude, 2);
  float pressure = myPressure.readPressure();
  Serial.print(" Pressure(Pa):");
  Serial.println(pressure, 2);
   // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.

  
  //float temperature = myPressure.readTemp();
  //Serial.print(" Temp(c):");
  //Serial.print(temperature, 2);
  //float temperature = myPressure.readTempF();
  //Serial.print(" Temp(f):");
  //Serial.print(temperature, 2);
  //Serial.println();
}




/*
 MPL3115A2 Barometric Pressure Sensor Library Example Code
 By: Nathan Seidle
 SparkFun Electronics
 Date: September 24th, 2013
 License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).
 
 Uses the MPL3115A2 library to display the current altitude and temperature
 
 Hardware Connections (Breakoutboard to Arduino):
 -VCC = 3.3V
 -SDA = A4 (use inline 10k resistor if your board is 5V)
 -SCL = A5 (use inline 10k resistor if your board is 5V)
 -INT pins can be left unconnected for this demo
 
 During testing, GPS with 9 satellites reported 5393ft, sensor reported 5360ft (delta of 33ft). Very close!
 During testing, GPS with 8 satellites reported 1031ft, sensor reported 1021ft (delta of 10ft).
 
 Available functions:
 .begin() Gets sensor on the I2C bus.
 .readAltitude() Returns float with meters above sealevel. Ex: 1638.94
 .readAltitudeFt() Returns float with feet above sealevel. Ex: 5376.68
 .readPressure() Returns float with barometric pressure in Pa. Ex: 83351.25
 .readTemp() Returns float with current temperature in Celsius. Ex: 23.37
 .readTempF() Returns float with current temperature in Fahrenheit. Ex: 73.96
 .setModeBarometer() Puts the sensor into Pascal measurement mode.
 .setModeAltimeter() Puts the sensor into altimetery mode.
 .setModeStandy() Puts the sensor into Standby mode. Required when changing CTRL1 register.
 .setModeActive() Start taking measurements!
 .setOversampleRate(byte) Sets the # of samples from 1 to 128. See datasheet.
 .enableEventFlags() Sets the fundamental event flags. Required during setup.
 
*/
#include <Wire.h>
#include "SparkFunMPL3115A2.h"
//Create an instance of the object
MPL3115A2 myPressure;
void setup()
{
  Wire.begin();        // Join i2c bus
  Serial.begin(9600);  // Start serial for output
  myPressure.begin(); // Get sensor online
  // Configure the sensor
  //myPressure.setModeAltimeter(); // Measure altitude above sea level in meters
  myPressure.setModeBarometer(); // Measure pressure in Pascals from 20 to 110 kPa
  
  myPressure.setOversampleRate(2); // Set Oversample to the recommended 128
  myPressure.enableEventFlags(); // Enable all three pressure and temp event flags 
}
void loop()
{
float altitude = myPressure.readAltitude();
  Serial.print("Altitude(m):");
  Serial.print(altitude, 2);
  altitude = myPressure.readAltitudeFt();
  Serial.print(" Altitude(ft):");
  Serial.print(altitude, 2);
  float pressure = myPressure.readPressure();
  Serial.print("Pressure(Pa):");
  Serial.print(pressure, 2);
  //float temperature = myPressure.readTemp();
  //Serial.print(" Temp(c):");
  //Serial.print(temperature, 2);
  float temperature = myPressure.readTempF();
  Serial.print(" Temp(f):");
  Serial.print(temperature, 2);
  Serial.println();
}


#include <Adafruit_MPL3115A2.h>
Adafruit_MPL3115A2 baro;
const int led_pin = PB5;
uint32_t count = 0;
const uint16_t t1_load = 0; //start of cycle
const uint16_t t1_comp = 624; //one hundreth of a second with prescalar 256 (16MHz/256 = 62,500)
float SuperSonicMin = 2.0; // time it takes to reach supersonic speed
float SuperSonicSec = 30.0; 
void setup() {
  // put your setup code here, to run once:
  Serial.begin(31250);
  Serial.println("");
  Serial.println("Timer:");
  Wire.setClock(31250);
  
   //led output pin
  DDRB |= (1<<led_pin);
  //reset timer1 control register A
  TCCR1A = 0;
  //set CTC mode
  TCCR1B &= ~(1<<WGM13);
  TCCR1B |= (1<< WGM12);
  //set prescalar of 256 (100b) 
  TCCR1B |= (1<< CS12);
  TCCR1B &= ~(1<< CS11);
  TCCR1B &= ~(1<< CS10);
  //reset timer1 and set compare value
  TCNT1 = t1_load;
  OCR1A = t1_comp;
  //enable timer1 compare interrupt
  TIMSK1 = (1<< OCIE1A);
  // enable global intterupts
  sei();
}
void loop() {
  // put your main code here, to run repeatedly:
}
ISR(TIMER1_COMPA_vect){
  float SuperSonicCount = (SuperSonicSec/60.0 +SuperSonicMin)*6000.0;
  int HundrethSec = count % 10;
  int TenthSec = (count/10) % 10;
  int OneSec = (count/ 100) % 10;
  int TenSec = (count/ 1000)%6;
  Serial.print("T+");Serial.print(count/6000);Serial.print(":");Serial.print(TenSec);Serial.print(OneSec);Serial.print(":");Serial.print(TenthSec);Serial.println(HundrethSec);
      
  if(count > SuperSonicCount ){
    PORTB ^= (1 << led_pin);
  }
  count ++;
}

#include <SD.h>
 
File myFile;
 
void setup()
{
  Serial.begin(9600);
  Serial.print("Initializing SD card...");
  // On the Ethernet Shield, CS is pin 4. It's set as an output by default.
  // Note that even if it's not used as the CS pin, the hardware SS pin 
  // (10 on most Arduino boards, 53 on the Mega) must be left as an output 
  // or the SD library functions will not work. 
   pinMode(10, OUTPUT);
 
  if (!SD.begin(10)) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization done.");
 
  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  myFile = SD.open("test.txt", FILE_WRITE);
 
  // if the file opened okay, write to it:
  if (myFile) {
    Serial.print("Writing to test.txt...");
    myFile.println("testing 1, 2, 3.");
	// close the file:
    myFile.close();
    Serial.println("done.");
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening test.txt");
  }
}
 
void loop()
{
	// nothing happens after setup
}
